#!/bin/bash

function setup_dependencies {
    echo -e "\n\n\n"
    echo -e "$(tput setaf 3)Installing dependencies...$(tput sgr0)"
    echo -e "\n\n\n"

    # Check if OSX.
    if [[ "$OSTYPE" =~ ^darwin ]]
    then
        brew install rabbitmq
        brew install wget

        # Required by mwlib.
        brew install libevent
        brew install re2c

        # MongoDB
        brew install mongodb

        # Redis
        brew install redis

        # Bzr, for python-dateutil
        brew install bzr

        # gfortran, for building scipy
        brew install gfortran

    # Otherwise, assume Linux...
    else 
        # Various python deps and also scipy deps.
        sudo apt-get -y install python3 python3-dev python3-setuptools build-essential zlib1g-dev libssl-dev libreadline-dev libyaml-dev libcurl4-openssl-dev curl git-core python-software-properties python-pip python-dev

        sudo apt-get install rabbitmq-server -y
        sudo apt-get install unzip -y

        # Required by mwlib.
        sudo apt-get install libevent-dev -y
        sudo apt-get install re2c -y

        # Required by lxml.
        sudo apt-get install libxml2-dev libxslt1-dev python-dev lib32z1-dev -y

        # MongoDB
        sudo apt-get install mongodb -y

        # Redis
        sudo apt-get install redis -y

        # Bzr, for python-dateutil
        sudo apt-get install bzr -y
    fi
}

function setup_virtualenv {
    echo -e "\n\n\n"
    echo -e "$(tput setaf 3)Setting up virtual environment...$(tput sgr0)"
    echo -e "\n\n\n"

    # Setup the Python 3.3 virtualenv.
    virtualenv-3.3 dev-env --no-site-packages
    source dev-env/bin/activate
    pip install numpy
    pip install -r requirements.txt
}

function setup_nltk {
    echo -e "\n\n\n"
    echo -e "$(tput setaf 3)Gathering NLTK data...$(tput sgr0)"
    echo -e "\n\n\n"

    # Download NLTK (Python 3) data.
    source dev-env/bin/activate

    # Tokenizing and lemmatization.
    #   nltk data downloads have been hanging for me.
    #   Temporarily handle this way.
    #python -m nltk.downloader wordnet
    wget -O wordnet.zip https://github.com/nltk/nltk_data/blob/gh-pages/packages/corpora/wordnet.zip?raw=true
    mkdir -p ~/nltk_data/corpora
    unzip -o wordnet.zip -d ~/nltk_data/corpora
    rm wordnet.zip

    #python -m nltk.downloader stopwords
    wget -O stopwords.zip https://github.com/nltk/nltk_data/blob/gh-pages/packages/corpora/stopwords.zip?raw=true
    unzip -o stopwords.zip -d ~/nltk_data/corpora
    rm stopwords.zip

    #python -m nltk.downloader punkt
    wget -O punkt.zip https://github.com/nltk/nltk_data/blob/gh-pages/packages/tokenizers/punkt.zip?raw=true
    mkdir -p ~/nltk_data/tokenizers
    unzip -o punkt.zip -d ~/nltk_data/tokenizers
    rm punkt.zip

    # Named Entity Recognition
    python -m nltk.downloader words
    # Not yet Python 3 ready:
    #python -m nltk.downloader maxent_treebank_pos_tagger
    #python -m nltk.downloader maxent_ne_chunker

    # Installing Python 3 ready alternative data.
    mkdir ~/nltk_data/chunkers
    wget -O ~/nltk_data/chunkers/maxent_ne_chunker.zip 'https://github.com/jskda/nltk_data/raw/gh-pages-repickle/packages/chunkers/maxent_ne_chunker.zip'
    unzip -o ~/nltk_data/chunkers/maxent_ne_chunker.zip -d ~/nltk_data/chunkers
    rm ~/nltk_data/chunkers/maxent_ne_chunker.zip
    mkdir ~/nltk_data/taggers
    wget -O ~/nltk_data/taggers/maxent_treebank_pos_tagger.zip 'https://github.com/jskda/nltk_data/raw/gh-pages-repickle/packages/taggers/maxent_treebank_pos_tagger.zip'
    unzip -o ~/nltk_data/taggers/maxent_treebank_pos_tagger.zip -d ~/nltk_data/taggers
    rm ~/nltk_data/taggers/maxent_treebank_pos_tagger.zip
}

function setup_ner {
    echo -e "\n\n\n"
    echo -e "$(tput setaf 3)Setting up Stanford NER...$(tput sgr0)"
    echo -e "\n\n\n"

    wget -O ner.zip 'http://nlp.stanford.edu/software/stanford-ner-2013-06-20.zip'
    unzip -o ner.zip
    mv 'stanford-ner-2013-06-20' ner
    rm ner.zip
}

function setup_doc {
    echo -e "\n\n\n"
    echo -e "$(tput setaf 3)Building documentation...$(tput sgr0)"
    echo -e "\n\n\n"

    source dev-env/bin/activate
    cd doc
    make clean
    make html
    cd ..
}


echo -e "\n\n\n\n\n"
echo -e "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo -e "$(tput setaf 6)Welcome to $(tput setaf 3)Argos$(tput setaf 6)!$(tput sgr0)"
echo -e "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo -e "\n\n\n\n\n"

setup_dependencies
setup_virtualenv
setup_ner
setup_nltk

# Rename configs if necessary.
if [ ! -f config.py ]; then
    mv config-sample.py config.py
fi
if [ ! -f cluster/config.ini ]; then
    mv cluster/config-sample.ini cluster/config.ini
fi
if [ ! -f cluster/celery_config.py ]; then
    mv cluster/celery_config-sample.py cluster/celery_config.py
fi

setup_doc

echo -e "\n\n\n\n\n"
echo -e "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo -e "$(tput setaf 6)Finished setting up $(tput setaf 3)Argos$(tput setaf 6)!$(tput sgr0)"
echo -e "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo -e "\n\n\n\n\n"
